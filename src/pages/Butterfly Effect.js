"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import Header from "../components/header"
import Footer from "../components/footer"
import "../styles/Butterfly Effect.css"

// Fallback effects for when AI is not available
const fallbackEffects = [
  "Decided to wear mismatched socks ‚Üí Caught attention of a fashion scout ‚Üí Became trendsetter for asymmetrical fashion ‚Üí Started global movement against conformity ‚Üí Overthrew the sock industry ‚Üí Established the Republic of Mismatched Everything",

  "Chose to eat cereal for dinner ‚Üí Spilled milk on important documents ‚Üí Documents became illegible ‚Üí Had to rewrite them from memory ‚Üí Made accidental improvements ‚Üí Got promoted ‚Üí Became CEO ‚Üí Bought the cereal company",

  "Decided to take stairs instead of elevator ‚Üí Met someone carrying too many boxes ‚Üí Helped them carry boxes ‚Üí Boxes contained prototype inventions ‚Üí Became business partners ‚Üí Invented teleportation ‚Üí Eliminated need for stairs and elevators",

  "Chose to listen to a different song ‚Üí Song had subliminal frequency ‚Üí Awakened dormant psychic abilities ‚Üí Could predict lottery numbers ‚Üí Won jackpot ‚Üí Bought small country ‚Üí Declared it a music-only nation",

  "Decided to pet a random cat ‚Üí Cat followed you home ‚Üí Cat was actually an alien scout ‚Üí Aliens made first contact through cat ‚Üí Became Earth's ambassador ‚Üí Negotiated intergalactic peace ‚Üí Cats now rule the universe",

  "Chose to use a different pen ‚Üí Pen leaked on your hand ‚Üí Hand print on door became abstract art ‚Üí Art critic discovered it ‚Üí Became famous artist ‚Üí Art sold for millions ‚Üí Bought pen factory ‚Üí All pens now leak intentionally",

  "Decided to walk a different route ‚Üí Found a $20 bill ‚Üí Used it to buy lottery ticket ‚Üí Won small prize ‚Üí Reinvested winnings ‚Üí Became professional gambler ‚Üí Opened casino ‚Üí Banned walking on that route to preserve luck",

  "Chose to sneeze at wrong moment ‚Üí Sneeze caused butterfly to change direction ‚Üí Butterfly landed on nuclear physicist ‚Üí Physicist had breakthrough idea ‚Üí Invented clean energy ‚Üí Solved climate crisis ‚Üí Your sneeze saved the planet",
]

function ButterflyEffect() {
  const [userInput, setUserInput] = useState("")
  const [output, setOutput] = useState("Enter a decision to generate butterfly effects.")
  const [isLoading, setIsLoading] = useState(false)
  const [webllmReady, setWebllmReady] = useState(false)
  const [initializationAttempted, setInitializationAttempted] = useState(false)
  const engineRef = useRef(null)

  // Move initializeWebLLM inside useCallback
  const initializeWebLLM = useCallback(async () => {
    if (initializationAttempted) return
    setInitializationAttempted(true)

    // Skip AI initialization during build
    if (typeof window === "undefined") {
      setWebllmReady(false)
      setOutput("Offline mode ready - generate butterfly effects!")
      return
    }

    setOutput("Loading AI model... This may take a few minutes on first load.<br/>Downloading model files...")

    try {
      // Only attempt dynamic import in browser environment
      console.log("Attempting to load WebLLM...");
      const webllmModule = await import("https://esm.run/@mlc-ai/web-llm");
      console.log("WebLLM module loaded", webllmModule);

      const { CreateMLCEngine } = webllmModule

      // Initialize with a smaller, faster model
      const selectedModel = "Llama-3.2-1B-Instruct-q4f32_1-MLC"

      setOutput(`Initializing ${selectedModel}...<br/>Please wait, this may take a moment...`)
      console.log("Creating MLC engine...");
      engineRef.current = await CreateMLCEngine(selectedModel, {
        initProgressCallback: (report) => {
          console.log("WebLLM Init Progress:", report)
          if (report.text) {
            setOutput(`Loading: ${report.text}<br/>Progress: ${Math.round((report.progress || 0) * 100)}%`)
          }
        },
      })
      console.log("Engine created", engineRef.current);
      
      setWebllmReady(true)
      console.log("ü§ñ WebLLM initialized successfully!")
      setOutput("AI ready! Enter a decision to generate butterfly effects.")
    } catch (error) {
      console.error("Failed to initialize WebLLM:", error)
      setWebllmReady(false)
      setOutput("Using offline mode with pre-generated effects.<br/>üé≤ Still fun, just not AI-powered!")
    }
  }, [initializationAttempted])

  useEffect(() => {
    // Check for saved theme preference, default to dark if none
    const savedTheme = localStorage.getItem("theme")
    const shouldBeDark = savedTheme === "dark" || (!savedTheme && true)

    document.documentElement.classList.toggle("dark", shouldBeDark)

    // Only try to initialize WebLLM in browser environment
    if (typeof window !== "undefined") {
      setTimeout(initializeWebLLM, 1000)
    } else {
      // Server-side rendering - skip AI initialization
      setInitializationAttempted(true)
      setOutput("Offline mode ready - generate butterfly effects!")
    }
  }, [initializeWebLLM])

  const generateWithAI = async (input) => {
    const prompt = `Create a surreal, darkly funny, and absurd butterfly effect chain starting from: "${input}".

Write a chain of 5‚Äì6 bizarre but logically connected events. Each event must follow from the last in a ridiculous, imaginative way.
Use arrows (‚Üí) to separate each step in the chain.
Keep it short, punchy, and vivid ‚Äî no explanations, no commentary.
Do not use first-person or second-person ‚Äî just describe the unfolding chain of events.

just output the chain, no extra text.

Now generate one starting from:`

    try {
      const response = await engineRef.current.chat.completions.create({
        messages: [{ role: "user", content: prompt }],
        temperature: 0.9,
        max_tokens: 150,
      })

      const text = response.choices?.[0]?.message?.content?.trim()

      if (text) {
        const formattedText = text.replace(/‚Üí/g, '<span class="arrow">‚Üí</span>').replace(/\n/g, "<br/>")
        return `<div class="butterfly-chain"><br/>${formattedText}</div>`
      } else {
        throw new Error("No response generated")
      }
    } catch (error) {
      console.error("Generation error:", error)
      throw error
    }
  }

  const generateWithFallback = (input) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // Pick a random fallback effect
        const randomEffect = fallbackEffects[Math.floor(Math.random() * fallbackEffects.length)]

        // Customize it slightly with the user's input
        const customizedEffect = randomEffect.replace(/^[^‚Üí]*/, `"${input}"`)

        const formattedText = customizedEffect.replace(/‚Üí/g, '<span class="arrow">‚Üí</span>')
        resolve(`<div class="butterfly-chain">Offline Mode:<br/>${formattedText}</div>`)
      }, 1500)
    })
  }

  const generateEffect = async () => {
    if (!userInput.trim()) {
      setOutput("‚ö†Ô∏è Please enter a decision first!")
      return
    }

    setIsLoading(true)
    setOutput("Generating butterfly effect...<br/>üß† Creating your effect chain...")

    try {
      let result
      // If WebLLM is ready, use AI
      if (webllmReady && engineRef.current) {
        try {
          result = await generateWithAI(userInput)
        } catch (error) {
          console.error("AI generation failed:", error)
          // Fall back to offline mode
          result = await generateWithFallback(userInput)
        }
      } else {
        // Use fallback effects
        result = await generateWithFallback(userInput)
      }

      setOutput(result)
    } catch (error) {
      console.error("Generation failed:", error)
      setOutput("Something went wrong! Try again.")
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      generateEffect()
    }
  }

  const getButtonText = () => {
    if (webllmReady) {
      return "Generate Effect (AI)"
    } else if (initializationAttempted) {
      return "Generate Effect (Offline)"
    } else {
      return "Loading..."
    }
  }

  const isButtonDisabled = () => {
    return !initializationAttempted || isLoading
  }

  return (
    <div className="min-h-screen p-4">
      <div className="scanline"></div>
      <div className="crt-effect"></div>

      <Header />

      <main className="main-container">
        <div className="butterfly-container">
          <h1 className="butterfly-title">The Butterfly Effect Machine</h1>

          <div className="input-section">
            <p className="instruction-text">Enter a tiny decision and watch chaos unfold:</p>
            <input
              type="text"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="e.g. Skipped brushing teeth at age 12"
              className="butterfly-input"
            />
            <button
              onClick={generateEffect}
              disabled={isButtonDisabled()}
              className={`retro-button generate-button ${isButtonDisabled() ? "disabled" : ""}`}
            >
              {getButtonText()}
            </button>
          </div>

          <div
            className={`output-container ${isLoading ? "loading" : ""}`}
            dangerouslySetInnerHTML={{ __html: output }}
          />

          <div className="info-section">
            <div className="info-text">
              <p>Powered by local AI (when available)</p>
              <p>Each decision creates infinite possibilities</p>
              <p>Your data stays private - runs in your browser!</p>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

export default ButterflyEffect
