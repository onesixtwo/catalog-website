"use client"

import { useState } from "react"
import Header from "../components/header"
import Footer from "../components/footer"
import "../styles/Butterfly Effect.css"

// Your fallback effects if API fails
const fallbackEffects = [
  "Decided to wear mismatched socks ‚Üí Caught attention of a fashion scout ‚Üí Became trendsetter for asymmetrical fashion ‚Üí Started global movement against conformity ‚Üí Overthrew the sock industry ‚Üí Established the Republic of Mismatched Everything",
  "Chose to eat cereal for dinner ‚Üí Spilled milk on important documents ‚Üí Documents became illegible ‚Üí Had to rewrite them from memory ‚Üí Made accidental improvements ‚Üí Got promoted ‚Üí Became CEO ‚Üí Bought the cereal company",
  "Decided to take stairs instead of elevator ‚Üí Met someone carrying too many boxes ‚Üí Helped them carry boxes ‚Üí Boxes contained prototype inventions ‚Üí Became business partners ‚Üí Invented teleportation ‚Üí Eliminated need for stairs and elevators",
  "Chose to listen to a different song ‚Üí Song had subliminal frequency ‚Üí Awakened dormant psychic abilities ‚Üí Could predict lottery numbers ‚Üí Won jackpot ‚Üí Bought small country ‚Üí Declared it a music-only nation",
  "Decided to pet a random cat ‚Üí Cat followed you home ‚Üí Cat was actually an alien scout ‚Üí Aliens made first contact through cat ‚Üí Became Earth's ambassador ‚Üí Negotiated intergalactic peace ‚Üí Cats now rule the universe",
  "Chose to use a different pen ‚Üí Pen leaked on your hand ‚Üí Hand print on door became abstract art ‚Üí Art critic discovered it ‚Üí Became famous artist ‚Üí Art sold for millions ‚Üí Bought pen factory ‚Üí All pens now leak intentionally",
  "Decided to walk a different route ‚Üí Found a $20 bill ‚Üí Used it to buy lottery ticket ‚Üí Won small prize ‚Üí Reinvested winnings ‚Üí Became professional gambler ‚Üí Opened casino ‚Üí Banned walking on that route to preserve luck",
  "Chose to sneeze at wrong moment ‚Üí Sneeze caused butterfly to change direction ‚Üí Butterfly landed on nuclear physicist ‚Üí Physicist had breakthrough idea ‚Üí Invented clean energy ‚Üí Solved climate crisis ‚Üí Your sneeze saved the planet",
]

// === Configuration: replace these with your own ===
const OPENROUTER_API_KEY = "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"
const SITE_URL = "https://vargass.netlify.app/Butterfly%20Effect" // e.g. "https://butterflyeffect.example.com"
const SITE_NAME = "Butterfly Effect Machine"
// ===============================================

export default function ButterflyEffect() {
  const [userInput, setUserInput] = useState("")
  const [output, setOutput] = useState("Enter a tiny decision to generate butterfly effects.")
  const [isLoading, setIsLoading] = useState(false)

  // Function to call OpenRouter API
  const generateWithAI = async (input) => {
    const prompt = `Create a surreal, darkly funny, and absurd butterfly effect chain starting from: "${input}".\n\nWrite a chain of 5‚Äì6 bizarre but logically connected events. Each event must follow from the last in a ridiculous, imaginative way.\nUse arrows (‚Üí) to separate each step in the chain.\nKeep it short, punchy, and vivid ‚Äî no explanations, no commentary.\nDo not use first-person or second-person ‚Äî just describe the unfolding chain of events.\n\nNow generate one starting from:`

    try {
      const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
          "HTTP-Referer": SITE_URL,
          "X-Title": SITE_NAME,
        },
        body: JSON.stringify({
          model: "deepseek/deepseek-r1-0528:free",
          messages: [
            {
              role: "user",
              content: `${prompt} "${input}"`,
            },
          ],
          temperature: 0.9,
          max_tokens: 300,
        }),
      })

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`)
      }

      const data = await response.json()

      const text = data.choices?.[0]?.message?.content?.trim()

      if (!text) throw new Error("No response text from API")

      const formattedText = text
        .replace(/‚Üí/g, '<span class="arrow">‚Üí</span>')
        .replace(/\n/g, "<br/>")

      return `<div class="butterfly-chain"><br/>${formattedText}</div>`
    } catch (error) {
      console.error("OpenRouter AI generation failed:", error)
      throw error
    }
  }

  // Fallback effect generator
  const generateWithFallback = (input) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // Pick a random fallback effect
        const randomEffect = fallbackEffects[Math.floor(Math.random() * fallbackEffects.length)]
        // Customize it with user's input at the start
        const customizedEffect = randomEffect.replace(/^[^‚Üí]*/, `"${input}"`)
        const formatted = customizedEffect.replace(/‚Üí/g, '<span class="arrow">‚Üí</span>')
        resolve(`<div class="butterfly-chain">Offline Mode:<br/>${formatted}</div>`)
      }, 1500)
    })
  }

  // Main handler
  const generateEffect = async () => {
    if (!userInput.trim()) {
      setOutput("‚ö†Ô∏è Please enter a decision first!")
      return
    }

    setIsLoading(true)
    setOutput("Generating butterfly effect...<br/>üß† Thinking...")

    try {
      let result
      try {
        result = await generateWithAI(userInput)
      } catch (error) {
        // If API call fails, fallback
        result = await generateWithFallback(userInput)
      }
      setOutput(result)
    } catch (error) {
      console.error("Generation failed:", error)
      setOutput("Something went wrong! Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  // Handle Enter key press in input
  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      generateEffect()
    }
  }

  // Button text updates with loading state
  const getButtonText = () => (isLoading ? "Thinking..." : "Generate Effect")

  return (
    <div className="min-h-screen p-4">
      <div className="scanline"></div>
      <div className="crt-effect"></div>

      <Header />

      <main className="main-container">
        <div className="butterfly-container">
          <h1 className="butterfly-title">The Butterfly Effect Machine</h1>

          <div className="input-section">
            <p className="instruction-text">Enter a tiny decision and watch chaos unfold:</p>
            <input
              type="text"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="e.g. Skipped brushing teeth at age 12"
              className="butterfly-input"
              aria-label="Enter a tiny decision"
              disabled={isLoading}
            />
            <button
              onClick={generateEffect}
              disabled={isLoading}
              aria-label="Generate butterfly effect"
              className={`retro-button generate-button ${isLoading ? "disabled" : ""}`}
            >
              {getButtonText()}
            </button>
          </div>

          <div
            className={`output-container ${isLoading ? "loading" : ""}`}
            dangerouslySetInnerHTML={{ __html: output }}
            aria-live="polite"
          />

          <div className="info-section">
            <div className="info-text">
              <p>Powered by OpenRouter AI (when available)</p>
              <p>Each decision creates infinite possibilities</p>
              <p>Your data stays private - runs in your browser!</p>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}
